//
// Kestrel Grammar
//
// todo: ESCAPED_STRING handling
//

//
// A huntflow is a sequence of statements
//

start: statement*

statement: assignment
         | command_no_result
         
// If no VARIABLE is given, default to _ in post-parsing
assignment: VARIABLE "=" command_with_result
          | command_with_result

// "?" at the beginning will inline command
?command_with_result: assign
                    | find
                    | get
                    | group
                    | join
                    | load
                    | merge
                    | new
                    | sort

?command_no_result: apply
                  | disp
                  | info
                  | save

assign: expression

//
// All commands
// todo: use timespan in FIND
// todo: rewrite SORT using expression
//

find: "FIND"i ENTITY_TYPE RELATION (REVERSED)? VARIABLE (starttime endtime)?

get: "GET"i ENTITY_TYPE ("FROM"i DATASRC)? "WHERE"i STIXPATTERNBODY timespan?

group: "GROUP"i VARIABLE BY grp_spec ("WITH"i agg_list)?

join: "JOIN"i VARIABLE "," VARIABLE (BY STIXPATH "," STIXPATH)?

load: "LOAD"i DUMPPATH ("as"i ENTITY_TYPE)?

merge: VARIABLE ("+" VARIABLE)+

new: "NEW"i (ENTITY_TYPE)? VARDATA

sort: "SORT"i VARIABLE BY STIXPATH (ASC|DESC)?

apply: "APPLY"i ANALYTICS "ON"i variables ("WITH"i args)?

disp: "DISP"i expression

info: "INFO"i VARIABLE

save: "SAVE"i VARIABLE "TO"i DUMPPATH

//
// Variable definition
//

variables: VARIABLE ("," VARIABLE)*

VARIABLE: CNAME

//
// Expression
// todo: case insensitive for OP
//

expression: transform where_clause? attr_clause? sort_clause? limit_clause? offset_clause?

transform: TRANSFORM "(" VARIABLE ")"
         | VARIABLE

TRANSFORM: (TIMESTAMPED)

TIMESTAMPED: "TIMESTAMPED"i

where_clause: "WHERE"i condition
attr_clause: "ATTR"i STIXPATHS
sort_clause: "SORT"i BY STIXPATH (ASC|DESC)?
limit_clause: "LIMIT"i INT
offset_clause: "OFFSET"i INT

?condition: disjunction

?disjunction: conjunction
            | disjunction "OR"i conjunction -> disj

?conjunction: comparison
            | conjunction "AND"i comparison -> conj

?comparison: column OP value -> comp
           | column NULL_OP "NULL"i -> null_comp
           | "(" disjunction ")"

column: STIXPATH

?value: SQSTRING -> squoted_str
      | NUMBER   -> num_literal
      | /NULL/   -> nulls

OP: /([<>!=]?=|[<>]|IN|LIKE|MATCHES)/

NULL_OP: /IS (NOT)?/i

SQSTRING: /'[^']*'/

//
// Time span
// todo: double quotes; optional "^t"
//

timespan: starttime endtime
        | relative_timespan

relative_timespan: "last"i NUMBER timeunit

?timeunit: (DAY|HOUR|MINUTE|SECOND)
DAY: "days"i | "d"i
HOUR: "hours"i | "h"i
MINUTE: "minutes"i | "m"i
SECOND: "seconds"i | "s"i

starttime: "start"i "t'" ISOTIMESTAMP "'"

endtime: "stop"i "t'" ISOTIMESTAMP "'"

ISOTIMESTAMP: /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d(\.\d+)?Z/

//
// FIND command constructs
//

RELATION: WORD

//
// GET command constructs
//

STIXPATTERNBODY: "[" /.+/ "]" | "(" /.+/ ")"

//
// GROUP command constructs
//

grp_spec: grp_expr ("," grp_expr)*

grp_expr: STIXPATH
        | bin_func

bin_func: "BIN"i "(" STIXPATH "," NUMBER timeunit? ")"
// No other scalar funcs are supported yet

agg_list: agg ("," agg)*

agg: funcname "(" STIXPATH ")" ("AS"i alias)?

?funcname: (MIN|MAX|SUM|AVG|COUNT|NUNIQUE)
MIN: "MIN"i
MAX: "MAX"i
SUM: "SUM"i
AVG: "AVG"i
COUNT: "COUNT"i
NUNIQUE: "NUNIQUE"i

?alias: CNAME

//
// NEW command contstructs
// todo: replace QSTRING with JSON_VALUE
//

VARDATA: "[" (QSTRING ("," QSTRING)* | JSON_DICT ("," JSON_DICT)*) "]"

// manually add `WS*` since `%ignore WS` doesn't apply to spaces inside terminals
// https://github.com/lark-parser/lark/issues/99
QSTRING: WS* ESCAPED_STRING WS*
JSON_DICT: WS* "{" (QSTRING ":" JSON_VALUE) ("," QSTRING ":" JSON_VALUE)* "}" WS*
JSON_VALUE: WS* (ESCAPED_STRING|NUMBER) WS*

//
// Arguments
//

// use space after "," to avoid ambiguity between args and arg_values
args: arg_kv_pair (", " arg_kv_pair)*

arg_kv_pair: CNAME "=" arg_values

arg_values: arg_value ("," arg_value)*

arg_value: NUMBER
         | SIMPLESTRING
         | ESCAPED_STRING

//
// Shared command keywords
//

BY: "BY"i
ASC: "ASC"i
DESC: "DESC"i
REVERSED: "BY"i

//
// Common command terminals
// todo: clean up
//

ENTITY_TYPE: LETTER ("_"|LETTER|DIGIT|"-")*

DUMPPATH: PATH
ANALYTICS: PATH
PATH: (LETTER|DIGIT|/[-_.:\/]/)+
STIXPATH: (LETTER|DIGIT|/[-_.:']/)+
STIXPATHS: STIXPATH (/\s*,\s*/ STIXPATH)*
DATASRC: (PATH ("," PATH)* |ESCAPED_STRING)

//
// Common language terminals
//

SIMPLESTRING: (LETTER|DIGIT|"-"|"_"|".")+

%import common (CNAME, LETTER, DIGIT, WS, INT, WORD, ESCAPED_STRING, NUMBER)

%import common.SH_COMMENT -> COMMENT

%ignore WS
%ignore COMMENT
